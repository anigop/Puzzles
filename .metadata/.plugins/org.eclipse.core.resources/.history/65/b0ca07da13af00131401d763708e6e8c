import java.math.BigInteger;
import java.util.HashSet;
import java.util.PriorityQueue;



public class ComputeMaxCorrelation {

	public static final int TOP_N_RANKS = 3;
	private static OutputGsonObject op;
	
	
	public static class Heapnode implements Comparable<Heapnode> {
		public String id;
		public int count;
		public int compareTo(Heapnode l){
			if(this.count < l.count){
				return 1;
			}
			return -1;
		}
	}
	
	
	public static  void start(String filename){
		
		GsonObject g = FileRead.readFromFile(filename);
		Graph graph = new Graph();
		
		graph.buildGraph(g);
		
		if(g.getInput().size() > 0){
			
			for(Record r : g.getInput()){
				op = new OutputGsonObject();
				if(graph.getGraph().get(r.getId()) != null){
					HashSet<Node> firstDegree = new HashSet<Node>();
					HashSet<Node> secondDegreeConnections = new HashSet<Node>();
					
					//System.out.println("For "+r.getId());
					
					//System.out.println("Followed by ");
					for(Node n : graph.getGraph().get(r.getId()).getIngress()){
						//System.out.print(n.getId()+"   ");
						firstDegree.add(n);
					}
					//System.out.println();
					
					//System.out.println("Sec Degree");
					for(Node n : firstDegree){
						//System.out.println("Sec for "+n.getId());
						for(Node d : n.getIngress()){
							if(!firstDegree.contains(d) && (!d.getId().equals(r.getId()))){
								//System.out.print("  "+d.getId()+"  ");
								secondDegreeConnections.add(d);
							}
							
						}
						System.out.println();
					}
					
					compute(r ,graph, firstDegree, secondDegreeConnections);
				}
			}
			
			for(OutputRecord o : op.getOutput()){
				
			}
		}
	}
	
	public static void compute(Record r , Graph graph , HashSet<Node> firstDegree , HashSet<Node> secondDegreeConnections){
		
		PriorityQueue<Heapnode> heap = new PriorityQueue<Heapnode>();
		String id = r.getId();
		
		for(Node n : secondDegreeConnections){
			int count = 0;
			for(Node out : n.getEgress()){
				count = firstDegree.contains(out) ? count+1: count;
			}
			
			if(count > 0){
				Heapnode h = new Heapnode();
				h.count = count;
				h.id = n.getId();
				
				heap.add(h);
			}
		}
		
		
		OutputRecord o = new OutputRecord();
		int count = 0;
		o.setId(id);
		while(!heap.isEmpty() && count < TOP_N_RANKS){
			Heapnode h = heap.remove();
			o.getTop3().add(new BigInteger(h.id));
			count++;
		}
		System.out.println(o.getId()+"    top3 = "+o.getTop3());
		op.getOutput().add(o);
	}
		
	
	
	
}
